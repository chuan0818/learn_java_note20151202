首先，这个是Java语言规范规定的内容。
其次，你可以想象一下如何去指向这个静态成员。
非静态内部类是通过外部类的this指针指向的。
那么对于非静态内部类的动态成员，
可以通过两个this指针确定位置。
但是如果允许静态成员会出现什么情况？
首先，静态成员是不能通过任何this指针的，
但是为了确定这个成员，必须确定这个成员所在的类实例。
但是这个实例必须通过一个this指针确定。这在语法以及处理上都会造成很大的麻烦。--网上搜的





Java代码 复制代码 收藏代码
1.public class OuterClass{  
2.     class InnerClass{  
3.         private static int i;  
4.     }  
5.}  


 对于java类加载顺序我们知道，首先加载类，执行static变量初始化，接下来执行对象的创建，如果我们要执行代码中的变量i初始化，

那么必须先执行加载OuterClass，再加载Innerclass，最后初始化静态变量i，问题就出在加载Innerclass上面，我们可以把InnerClass看成OuterClass的非静态成员，它的初始化必须在外部类对象创建后以后进行，要加载InnerClass必须在实例化OuterClass之后完成  ，java虚拟机要求所有的静态变量必须在对象创建之前完成，这样便产生了矛盾。

Verion 0.11: 

对于红色标记的部分，当时理解上有误，我们知道InnerClass可以有静态常量（static final），那么InnerClass类加载一定在OuterClass对象创建之前完成，但这还不足以说明为什么非静态内部类里面不能有静态的变量（基本类型 或对象因用），这里面涉及到Java语言的定义以及JVM的类加载的原理方面的知识，我将进一步研究这个问题，技术是严谨的，也希望各位读者提出宝贵的意见。 
